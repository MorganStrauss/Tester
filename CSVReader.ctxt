#BlueJ class context
comment0.params=fileName\ delimiter\ charset
comment0.target=CSVReader(java.lang.String,\ char,\ java.nio.charset.Charset)
comment0.text=\r\n\ Creates\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ a\ file\r\n\ as\ the\ data\ source.\r\n\ \r\n\ @param\ fileName\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ path\ to\ the\ file\ to\ use\ as\ the\ data\ source.\r\n\ @param\ delimiter\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ the\ column\ delimiter.\r\n\ @param\ charset\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ {@link\ java.nio.charset.Charset\ Charset}\ to\ use\ while\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ parsing\ the\ data.\r\n
comment1.params=fileName\ delimiter
comment1.target=CSVReader(java.lang.String,\ char)
comment1.text=\r\n\ Creates\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ a\ file\r\n\ as\ the\ data\ source.&nbsp;Uses\ ISO-8859-1\ as\ the\r\n\ {@link\ java.nio.charset.Charset\ Charset}.\r\n\ \r\n\ @param\ fileName\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ path\ to\ the\ file\ to\ use\ as\ the\ data\ source.\r\n\ @param\ delimiter\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ the\ column\ delimiter.\r\n
comment10.params=
comment10.target=boolean\ getTrimWhitespace()
comment10.text=\r\n\ Gets\ whether\ leading\ and\ trailing\ whitespace\ characters\ are\ being\ trimmed\r\n\ from\ non-textqualified\ column\ data.\ Default\ is\ true.\r\n\ \r\n\ @return\ Whether\ leading\ and\ trailing\ whitespace\ characters\ are\ being\r\n\ \ \ \ \ \ \ \ \ trimmed\ from\ non-textqualified\ column\ data.\r\n
comment11.params=trimWhitespace
comment11.target=void\ setTrimWhitespace(boolean)
comment11.text=\r\n\ Sets\ whether\ leading\ and\ trailing\ whitespace\ characters\ should\ be\ trimmed\r\n\ from\ non-textqualified\ column\ data\ or\ not.\ Default\ is\ true.\r\n\ \r\n\ @param\ trimWhitespace\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Whether\ leading\ and\ trailing\ whitespace\ characters\ should\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ be\ trimmed\ from\ non-textqualified\ column\ data\ or\ not.\r\n
comment12.params=
comment12.target=char\ getDelimiter()
comment12.text=\r\n\ Gets\ the\ character\ being\ used\ as\ the\ column\ delimiter.\ Default\ is\ comma,\r\n\ ','.\r\n\ \r\n\ @return\ The\ character\ being\ used\ as\ the\ column\ delimiter.\r\n
comment13.params=delimiter
comment13.target=void\ setDelimiter(char)
comment13.text=\r\n\ Sets\ the\ character\ to\ use\ as\ the\ column\ delimiter.\ Default\ is\ comma,\ ','.\r\n\ \r\n\ @param\ delimiter\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ the\ column\ delimiter.\r\n
comment14.params=
comment14.target=char\ getRecordDelimiter()
comment15.params=recordDelimiter
comment15.target=void\ setRecordDelimiter(char)
comment15.text=\r\n\ Sets\ the\ character\ to\ use\ as\ the\ record\ delimiter.\r\n\ \r\n\ @param\ recordDelimiter\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ the\ record\ delimiter.\ Default\ is\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ combination\ of\ standard\ end\ of\ line\ characters\ for\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Windows,\ Unix,\ or\ Mac.\r\n
comment16.params=
comment16.target=char\ getTextQualifier()
comment16.text=\r\n\ Gets\ the\ character\ to\ use\ as\ a\ text\ qualifier\ in\ the\ data.\r\n\ \r\n\ @return\ The\ character\ to\ use\ as\ a\ text\ qualifier\ in\ the\ data.\r\n
comment17.params=textQualifier
comment17.target=void\ setTextQualifier(char)
comment17.text=\r\n\ Sets\ the\ character\ to\ use\ as\ a\ text\ qualifier\ in\ the\ data.\r\n\ \r\n\ @param\ textQualifier\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ a\ text\ qualifier\ in\ the\ data.\r\n
comment18.params=
comment18.target=boolean\ getUseTextQualifier()
comment18.text=\r\n\ Whether\ text\ qualifiers\ will\ be\ used\ while\ parsing\ or\ not.\r\n\ \r\n\ @return\ Whether\ text\ qualifiers\ will\ be\ used\ while\ parsing\ or\ not.\r\n
comment19.params=useTextQualifier
comment19.target=void\ setUseTextQualifier(boolean)
comment19.text=\r\n\ Sets\ whether\ text\ qualifiers\ will\ be\ used\ while\ parsing\ or\ not.\r\n\ \r\n\ @param\ useTextQualifier\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Whether\ to\ use\ a\ text\ qualifier\ while\ parsing\ or\ not.\r\n
comment2.params=fileName
comment2.target=CSVReader(java.lang.String)
comment2.text=\r\n\ Creates\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ a\ file\r\n\ as\ the\ data\ source.&nbsp;Uses\ a\ comma\ as\ the\ column\ delimiter\ and\r\n\ ISO-8859-1\ as\ the\ {@link\ java.nio.charset.Charset\ Charset}.\r\n\ \r\n\ @param\ fileName\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ path\ to\ the\ file\ to\ use\ as\ the\ data\ source.\r\n
comment20.params=
comment20.target=char\ getComment()
comment20.text=\r\n\ Gets\ the\ character\ being\ used\ as\ a\ comment\ signal.\r\n\ \r\n\ @return\ The\ character\ being\ used\ as\ a\ comment\ signal.\r\n
comment21.params=comment
comment21.target=void\ setComment(char)
comment21.text=\r\n\ Sets\ the\ character\ to\ use\ as\ a\ comment\ signal.\r\n\ \r\n\ @param\ comment\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ a\ comment\ signal.\r\n
comment22.params=
comment22.target=boolean\ getUseComments()
comment22.text=\r\n\ Gets\ whether\ comments\ are\ being\ looked\ for\ while\ parsing\ or\ not.\r\n\ \r\n\ @return\ Whether\ comments\ are\ being\ looked\ for\ while\ parsing\ or\ not.\r\n
comment23.params=useComments
comment23.target=void\ setUseComments(boolean)
comment23.text=\r\n\ Sets\ whether\ comments\ are\ being\ looked\ for\ while\ parsing\ or\ not.\r\n\ \r\n\ @param\ useComments\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Whether\ comments\ are\ being\ looked\ for\ while\ parsing\ or\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ not.\r\n
comment24.params=
comment24.target=int\ getEscapeMode()
comment24.text=\r\n\ Gets\ the\ current\ way\ to\ escape\ an\ occurrence\ of\ the\ text\ qualifier\ inside\r\n\ qualified\ data.\r\n\ \r\n\ @return\ The\ current\ way\ to\ escape\ an\ occurrence\ of\ the\ text\ qualifier\r\n\ \ \ \ \ \ \ \ \ inside\ qualified\ data.\r\n
comment25.params=escapeMode
comment25.target=void\ setEscapeMode(int)
comment25.text=\r\n\ Sets\ the\ current\ way\ to\ escape\ an\ occurrence\ of\ the\ text\ qualifier\ inside\r\n\ qualified\ data.\r\n\ \r\n\ @param\ escapeMode\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ way\ to\ escape\ an\ occurrence\ of\ the\ text\ qualifier\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ inside\ qualified\ data.\r\n\ @exception\ IllegalArgumentException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ When\ an\ illegal\ value\ is\ specified\ for\ escapeMode.\r\n
comment26.params=
comment26.target=boolean\ getSkipEmptyRecords()
comment27.params=skipEmptyRecords
comment27.target=void\ setSkipEmptyRecords(boolean)
comment28.params=
comment28.target=boolean\ getSafetySwitch()
comment28.text=\r\n\ Safety\ caution\ to\ prevent\ the\ parser\ from\ using\ large\ amounts\ of\ memory\r\n\ in\ the\ case\ where\ parsing\ settings\ like\ file\ encodings\ don't\ end\ up\r\n\ matching\ the\ actual\ format\ of\ a\ file.\ This\ switch\ can\ be\ turned\ off\ if\r\n\ the\ file\ format\ is\ known\ and\ tested.\ With\ the\ switch\ off,\ the\ max\ column\r\n\ lengths\ and\ max\ column\ count\ per\ record\ supported\ by\ the\ parser\ will\r\n\ greatly\ increase.\ Default\ is\ true.\r\n\ \r\n\ @return\ The\ current\ setting\ of\ the\ safety\ switch.\r\n
comment29.params=safetySwitch
comment29.target=void\ setSafetySwitch(boolean)
comment29.text=\r\n\ Safety\ caution\ to\ prevent\ the\ parser\ from\ using\ large\ amounts\ of\ memory\r\n\ in\ the\ case\ where\ parsing\ settings\ like\ file\ encodings\ don't\ end\ up\r\n\ matching\ the\ actual\ format\ of\ a\ file.\ This\ switch\ can\ be\ turned\ off\ if\r\n\ the\ file\ format\ is\ known\ and\ tested.\ With\ the\ switch\ off,\ the\ max\ column\r\n\ lengths\ and\ max\ column\ count\ per\ record\ supported\ by\ the\ parser\ will\r\n\ greatly\ increase.\ Default\ is\ true.\r\n\ \r\n\ @param\ safetySwitch\r\n
comment3.params=inputStream\ delimiter
comment3.target=CSVReader(java.io.Reader,\ char)
comment3.text=\r\n\ Constructs\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ a\r\n\ {@link\ java.io.Reader\ Reader}\ object\ as\ the\ data\ source.\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ stream\ to\ use\ as\ the\ data\ source.\r\n\ @param\ delimiter\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ the\ column\ delimiter.\r\n
comment30.params=
comment30.target=int\ getColumnCount()
comment30.text=\r\n\ Gets\ the\ count\ of\ columns\ found\ in\ this\ record.\r\n\ \r\n\ @return\ The\ count\ of\ columns\ found\ in\ this\ record.\r\n
comment31.params=
comment31.target=long\ getCurrentRecord()
comment31.text=\r\n\ Gets\ the\ index\ of\ the\ current\ record.\r\n\ \r\n\ @return\ The\ index\ of\ the\ current\ record.\r\n
comment32.params=
comment32.target=int\ getHeaderCount()
comment32.text=\r\n\ Gets\ the\ count\ of\ headers\ read\ in\ by\ a\ previous\ call\ to\r\n\ {@link\ com.csvreader.CSVReader\#readHeaders\ readHeaders()}.\r\n\ \r\n\ @return\ The\ count\ of\ headers\ read\ in\ by\ a\ previous\ call\ to\r\n\ \ \ \ \ \ \ \ \ {@link\ com.csvreader.CSVReader\#readHeaders\ readHeaders()}.\r\n
comment33.params=
comment33.target=java.lang.String[]\ getHeaders()
comment33.text=\r\n\ Returns\ the\ header\ values\ as\ a\ string\ array.\r\n\ \r\n\ @return\ The\ header\ values\ as\ a\ String\ array.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ this\ object\ has\ already\ been\ closed.\r\n
comment34.params=headers
comment34.target=void\ setHeaders(java.lang.String[])
comment35.params=
comment35.target=java.lang.String[]\ getValues()
comment36.params=columnIndex
comment36.target=java.lang.String\ get(int)
comment36.text=\r\n\ Returns\ the\ current\ column\ value\ for\ a\ given\ column\ index.\r\n\ \r\n\ @param\ columnIndex\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ index\ of\ the\ column.\r\n\ @return\ The\ current\ column\ value.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ this\ object\ has\ already\ been\ closed.\r\n
comment37.params=headerName
comment37.target=java.lang.String\ get(java.lang.String)
comment37.text=\r\n\ Returns\ the\ current\ column\ value\ for\ a\ given\ column\ header\ name.\r\n\ \r\n\ @param\ headerName\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ header\ name\ of\ the\ column.\r\n\ @return\ The\ current\ column\ value.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ this\ object\ has\ already\ been\ closed.\r\n
comment38.params=data
comment38.target=CSVReader\ parse(java.lang.String)
comment38.text=\r\n\ Creates\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ a\ string\r\n\ of\ data\ as\ the\ source.&nbsp;Uses\ ISO-8859-1\ as\ the\r\n\ {@link\ java.nio.charset.Charset\ Charset}.\r\n\ \r\n\ @param\ data\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ String\ of\ data\ to\ use\ as\ the\ source.\r\n\ @return\ A\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ the\r\n\ \ \ \ \ \ \ \ \ String\ of\ data\ as\ the\ source.\r\n
comment39.params=
comment39.target=boolean\ readRecord()
comment39.text=\r\n\ Reads\ another\ record.\r\n\ \r\n\ @return\ Whether\ another\ record\ was\ successfully\ read\ or\ not.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ an\ error\ occurs\ while\ reading\ data\ from\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ source\ stream.\r\n
comment4.params=inputStream
comment4.target=CSVReader(java.io.Reader)
comment4.text=\r\n\ Constructs\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ a\r\n\ {@link\ java.io.Reader\ Reader}\ object\ as\ the\ data\ source.&nbsp;Uses\ a\r\n\ comma\ as\ the\ column\ delimiter.\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ stream\ to\ use\ as\ the\ data\ source.\r\n
comment40.params=
comment40.target=void\ checkDataLength()
comment40.text=\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ an\ error\ occurs\ while\ reading\ data\ from\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ source\ stream.\r\n
comment41.params=
comment41.target=boolean\ readHeaders()
comment41.text=\r\n\ Read\ the\ first\ record\ of\ data\ as\ column\ headers.\r\n\ \r\n\ @return\ Whether\ the\ header\ record\ was\ successfully\ read\ or\ not.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ an\ error\ occurs\ while\ reading\ data\ from\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ source\ stream.\r\n
comment42.params=columnIndex
comment42.target=java.lang.String\ getHeader(int)
comment42.text=\r\n\ Returns\ the\ column\ header\ value\ for\ a\ given\ column\ index.\r\n\ \r\n\ @param\ columnIndex\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ index\ of\ the\ header\ column\ being\ requested.\r\n\ @return\ The\ value\ of\ the\ column\ header\ at\ the\ given\ column\ index.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ this\ object\ has\ already\ been\ closed.\r\n
comment43.params=columnIndex
comment43.target=boolean\ isQualified(int)
comment44.params=
comment44.target=void\ endColumn()
comment44.text=\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ a\ very\ rare\ extreme\ exception\ occurs\ during\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ parsing,\ normally\ resulting\ from\ improper\ data\ format.\r\n
comment45.params=letter
comment45.target=void\ appendLetter(char)
comment46.params=
comment46.target=void\ updateCurrentValue()
comment47.params=
comment47.target=void\ endRecord()
comment47.text=\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ an\ error\ occurs\ while\ reading\ data\ from\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ source\ stream.\r\n
comment48.params=headerName
comment48.target=int\ getIndex(java.lang.String)
comment48.text=\r\n\ Gets\ the\ corresponding\ column\ index\ for\ a\ given\ column\ header\ name.\r\n\ \r\n\ @param\ headerName\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ header\ name\ of\ the\ column.\r\n\ @return\ The\ column\ index\ for\ the\ given\ column\ header\ name.&nbsp;Returns\r\n\ \ \ \ \ \ \ \ \ -1\ if\ not\ found.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ this\ object\ has\ already\ been\ closed.\r\n
comment49.params=
comment49.target=boolean\ skipRecord()
comment49.text=\r\n\ Skips\ the\ next\ record\ of\ data\ by\ parsing\ each\ column.&nbsp;Does\ not\r\n\ increment\r\n\ {@link\ com.csvreader.CSVReader\#getCurrentRecord\ getCurrentRecord()}.\r\n\ \r\n\ @return\ Whether\ another\ record\ was\ successfully\ skipped\ or\ not.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ an\ error\ occurs\ while\ reading\ data\ from\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ source\ stream.\r\n
comment5.params=inputStream\ delimiter\ charset
comment5.target=CSVReader(java.io.InputStream,\ char,\ java.nio.charset.Charset)
comment5.text=\r\n\ Constructs\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ an\r\n\ {@link\ java.io.InputStream\ InputStream}\ object\ as\ the\ data\ source.\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ stream\ to\ use\ as\ the\ data\ source.\r\n\ @param\ delimiter\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ character\ to\ use\ as\ the\ column\ delimiter.\r\n\ @param\ charset\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ {@link\ java.nio.charset.Charset\ Charset}\ to\ use\ while\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ parsing\ the\ data.\r\n
comment50.params=
comment50.target=boolean\ skipLine()
comment50.text=\r\n\ Skips\ the\ next\ line\ of\ data\ using\ the\ standard\ end\ of\ line\ characters\ and\r\n\ does\ not\ do\ any\ column\ delimited\ parsing.\r\n\ \r\n\ @return\ Whether\ a\ line\ was\ successfully\ skipped\ or\ not.\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ an\ error\ occurs\ while\ reading\ data\ from\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ source\ stream.\r\n
comment51.params=
comment51.target=void\ close()
comment51.text=\r\n\ Closes\ and\ releases\ all\ related\ resources.\r\n
comment52.params=closing
comment52.target=void\ close(boolean)
comment52.text=\r\n\ \r\n
comment53.params=
comment53.target=void\ checkClosed()
comment53.text=\r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Thrown\ if\ this\ object\ has\ already\ been\ closed.\r\n
comment54.params=
comment54.target=void\ finalize()
comment55.params=hex
comment55.target=char\ hexToDec(char)
comment6.params=inputStream\ charset
comment6.target=CSVReader(java.io.InputStream,\ java.nio.charset.Charset)
comment6.text=\r\n\ Constructs\ a\ {@link\ com.csvreader.CSVReader\ CSVReader}\ object\ using\ an\r\n\ {@link\ java.io.InputStream\ InputStream}\ object\ as\ the\ data\r\n\ source.&nbsp;Uses\ a\ comma\ as\ the\ column\ delimiter.\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ stream\ to\ use\ as\ the\ data\ source.\r\n\ @param\ charset\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ {@link\ java.nio.charset.Charset\ Charset}\ to\ use\ while\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ parsing\ the\ data.\r\n
comment7.params=
comment7.target=boolean\ getCaptureRawRecord()
comment8.params=captureRawRecord
comment8.target=void\ setCaptureRawRecord(boolean)
comment9.params=
comment9.target=java.lang.String\ getRawRecord()
numComments=56
